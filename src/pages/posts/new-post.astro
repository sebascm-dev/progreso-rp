---
import { marked } from "marked";
import { ID } from "appwrite";
import { databases } from "../../lib/appwriter";

import AdminRouteLayout from "../../layouts/AdminRouteLayout.astro";
import TextSection from "../../components/TextSection.astro";
import DescripcionPostsForm from "../../components/postComponents/DescripcionPostsForm.astro";
import ContenidoPostsForm from "../../components/postComponents/ContenidoPostsForm.astro";
import ButtonPostsForm from "../../components/postComponents/ButtonPostsForm.astro";
import TituloPostsForm from "../../components/postComponents/TituloPostsForm.astro";
import UrlPostsForm from "../../components/postComponents/UrlPostsForm.astro";
import ImagenPostsForm from "../../components/postComponents/ImagenPostsForm.astro";

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();

  // Convierte el contenido markdown
  const content = await marked(String(formData.get("content")));

  // Construye el objeto de datos
  const data = {
    title: formData.get("title"),
    slug: formData.get("slug"),
    content,
    excerpt: formData.get("excerpt"),
    imagepost: formData.get("imagepost"),
  };

  // Crea el documento en la base de datos
  const results = await databases.createDocument(
    "66454d410036db55430c",
    "6646440e002c2d76fb23",
    ID.unique(),
    data
  );

  // Redirecciona al nuevo post
  return Astro.redirect(`/posts/${results.slug}`);
}
---

<AdminRouteLayout
  title="New Post"
  description="Escribe y desarrolla tu nuevo artículo en este formulario y lo publicarás en la página de /blog."
>
  <TextSection
    text="CREAR UN NUEVO ÁRTICULO - PROGRESORP"
    subtext="Escribe y desarrolla tu nuevo artículo en este formulario y lo publicarás en la página de /blog."
  />
  <hr
    class="mt-2 mb-12 h-px border-t-0 bg-transparent bg-gradient-to-r from-transparent to-transparent opacity-25 via-neutral-400"
  />

  <div>
    <form id="articleForm" method="POST" enctype="multipart/form-data">
      <TituloPostsForm />

      <DescripcionPostsForm />

      <UrlPostsForm />

      <ImagenPostsForm />

      <ContenidoPostsForm />

      <ButtonPostsForm />
    </form>
  </div>
</AdminRouteLayout>

<div
  id="toast-danger"
  class="hidden absolute top-24 right-4 items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800"
  role="alert"
>
  <div
    class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200"
  >
    <svg
      class="w-5 h-5"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      fill="currentColor"
      viewBox="0 0 20 20"
    >
      <path
        d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"
      ></path>
    </svg>
    <span class="sr-only">Error icon</span>
  </div>
  <div class="ms-3 text-sm font-normal">
    El campo URL solo puede contener letras, números, guiones y espacios.
  </div>
  <button
    type="button"
    class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700"
    data-dismiss-target="#toast-danger"
    aria-label="Close"
  >
    <span class="sr-only">Close</span>
    <svg
      class="w-3 h-3"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 14 14"
    >
      <path
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
    </svg>
  </button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("articleForm") as HTMLFormElement;
    const slugInput = document.getElementById("slug") as HTMLInputElement;
    const toastDanger = document.getElementById(
      "toast-danger"
    ) as HTMLDivElement;

    form.addEventListener("submit", (event: Event) => {
      const slugValue = slugInput.value;
      const slugPattern = /^[a-zA-Z0-9\s-]+$/;

      if (!slugPattern.test(slugValue)) {
        toastDanger.classList.remove("hidden");
        toastDanger.classList.add("flex");
        toastDanger.classList.add("animate-fade-left");
        toastDanger.classList.add("animate-duration-500");
        toastDanger.classList.add("animate-delay-300");
        toastDanger.classList.add("animate-ease-in-out");

        slugInput.focus();
        event.preventDefault();

        setTimeout(() => {
          toastDanger.classList.remove("animate-fade-left");
          toastDanger.classList.add("animate-fade-right");
          toastDanger.classList.add("animate-duration-500");
          toastDanger.classList.add("animate-delay-300");
          toastDanger.classList.add("animate-ease-in-out");
          toastDanger.classList.add("animate-reverse");
        }, 4000);
      }
    });

    toastDanger.querySelector("button")?.addEventListener("click", () => {
      toastDanger.classList.add("hidden");
      toastDanger.classList.remove("flex");
    });
  });
</script>
