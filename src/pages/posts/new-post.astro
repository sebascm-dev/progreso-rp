---
import { marked } from "marked";
import { ID } from "appwrite";
import { databases } from "../../lib/appwriter";
import { extname } from "path";
import { Buffer } from "buffer";

import Layout from "../../layouts/Layout.astro";
import TextSection from "../../components/TextSection.astro";
import Hr from "../../components/Hr.astro";

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();

  // Obtener el archivo de imagen
  const imageFile = formData.get("imagepost") as File | null;

  // Verificar si se proporcionó un archivo de imagen
  if (imageFile) {
    // Lee el contenido del archivo de imagen como un ArrayBuffer
    const imageBuffer = await imageFile.arrayBuffer();

    // Convierte el buffer a un array de bytes
    const buffer = Buffer.from(imageBuffer);

    // Obtén la extensión del archivo
    const extension = extname(imageFile.name).slice(1); // Obtiene la extensión sin el punto

    // Verifica si se pudo determinar la extensión del archivo
    if (!extension) {
      return new Response(
        "No se pudo determinar la extensión del archivo de la imagen",
        { status: 400 }
      );
    }

    // Construye el tipo MIME a partir de la extensión del archivo
    const imageMimeType = `image/${extension}`;

    // Convierte el buffer a base64
    const imageBase64 = buffer.toString("base64");

    // Convierte el contenido markdown
    const content = await marked(String(formData.get("content")));

    // Construye el objeto de datos
    const data = {
      title: formData.get("title"),
      slug: formData.get("slug"),
      content,
      excerpt: formData.get("excerpt"),
      imagepost: `data:${imageMimeType};base64,${imageBase64}`, // Agrega la imagen como base64
    };

    // Crea el documento en la base de datos
    const results = await databases.createDocument(
      "66454d410036db55430c",
      "6646440e002c2d76fb23",
      ID.unique(),
      data
    );

    // Redirecciona al nuevo post
    return Astro.redirect(`/posts/${results.slug}`);
  } else {
    // Manejar el caso donde no se envía ningún archivo
    // Puedes devolver un error o realizar alguna acción apropiada
    return new Response("No se ha enviado ningún archivo de imagen", {
      status: 400,
    });
  }
}
---

<Layout title="New Post" description="TODO">
  <Hr />
  <TextSection text="CREAR UN NUEVO ÁRTICULO - PROGRESORP" subtext="TODO" />
  <hr
    class="mt-2 mb-12 h-px border-t-0 bg-transparent bg-gradient-to-r from-transparent to-transparent opacity-25 via-neutral-400"
  />

  <div>
    <form method="POST" enctype="multipart/form-data">
      <div class="mb-6">
        <label class="block text-sm font-semibold mb-3" for="title"
          >Título del Artículo:</label
        >
        <input
          id="title"
          class="p-2 rounded-md mb-2 bg-sky-50/5 outline-none resize-none border-l-2 border-sky-50/20 focus:border-l-2 focus:border-sky-300/60 focus:bg-sky-50/10 transition duration-300 w-full"
          type="text"
          name="title"
          required
        />
      </div>

      <div class="mb-6">
        <label class="block text-sm font-semibold mb-3" for="excerpt"
          >Descripción del Artículo:</label
        >
        <input
          id="excerpt"
          class="p-2 rounded-md mb-2 bg-sky-50/5 outline-none resize-none border-l-2 border-sky-50/20 focus:border-l-2 focus:border-sky-300/60 focus:bg-sky-50/10 transition duration-300 w-full"
          type="text"
          name="excerpt"
          required
        />
      </div>

      <div class="mb-6">
        <label class="block text-sm font-semibold mb-3" for="slug">URL:</label>
        <input
          id="slug"
          class="p-2 rounded-md mb-2 bg-sky-50/5 outline-none resize-none border-l-2 border-sky-50/20 focus:border-l-2 focus:border-sky-300/60 focus:bg-sky-50/10 transition duration-300 w-full"
          type="text"
          name="slug"
          required
        />
      </div>

      <div class="mb-6">
        <label class="block text-sm font-semibold mb-3" for="slug">
          Imagen de la Portada:
        </label>
        <input
          id="imagepost"
          class="p-2 rounded-md mb-2 bg-sky-50/5 outline-none resize-none border-l-2 border-sky-50/20 focus:border-l-2 focus:border-sky-300/60 focus:bg-sky-50/10 transition duration-300 w-full"
          type="file"
          name="imagepost"
          required
          hidden
          accept=".webp"
        />

        <div class="flex w-full text-center flex-col gap-1">
          <div
            id="dropArea"
            class="flex w-full flex-col items-center justify-center gap-2 rounded-xl border border-dashed p-8 border-slate-700 text-slate-300"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              aria-hidden="true"
              fill="currentColor"
              class="w-12 h-12 opacity-75"
            >
              <path
                fill-rule="evenodd"
                d="M10.5 3.75a6 6 0 0 0-5.98 6.496A5.25 5.25 0 0 0 6.75 20.25H18a4.5 4.5 0 0 0 2.206-8.423 3.75 3.75 0 0 0-4.133-4.303A6.001 6.001 0 0 0 10.5 3.75Zm2.03 5.47a.75.75 0 0 0-1.06 0l-3 3a.75.75 0 1 0 1.06 1.06l1.72-1.72v4.94a.75.75 0 0 0 1.5 0v-4.94l1.72 1.72a.75.75 0 1 0 1.06-1.06l-3-3Z"
                clip-rule="evenodd"></path>
            </svg>
            <div class="group">
              <label
                for="fileInputDragDrop"
                class="cursor-pointer font-medium group-focus-within:underline text-sky-400"
              >
                <input
                  id="fileInputDragDrop"
                  type="file"
                  class="sr-only"
                  aria-describedby="validFileFormats"
                  accept=".webp"
                />
                Mis Archivos
              </label>
              o Drag and Drop Here
            </div>
            <small id="validFileFormats" class="mb-5">Archivos WebP - Max 5MB</small>
          </div>
        </div>
      </div>

      <div class="mb-6">
        <label class="block text-sm font-semibold mb-1" for="content"
          >Escribe el contenido del Artículo:</label
        >
        <p class="text-xs text-slate-600 italic mb-3">
          El contenido deberá ser escrito con Markdown... <a
            class="hover:text-slate-400 transition-colors duration-300"
            target="_blank"
            rel="noopener noreferrer"
            href="https://pandao.github.io/editor.md/en.html">(Editor Fácil)</a
          >
          <a
            class="hover:text-slate-400 transition-colors duration-300"
            target="_blank"
            rel="noopener noreferrer"
            href="https://editormarkdown.com/">(Editor Clean)</a
          >
        </p>
        <textarea
          id="content"
          class="p-2 rounded-md min-h-[700px] mb-2 bg-sky-50/5 outline-none resize-none border-l-2 border-sky-50/20 focus:border-l-2 focus:border-sky-300/60 focus:bg-sky-50/10 transition duration-300 w-full"
          name="content"
          required
        >
        </textarea>
      </div>

      <button
        title="Save"
        class="cursor-pointer flex items-center fill-sky-400 bg-sky-950 hover:bg-sky-900 active:border active:border-sky-400 rounded-md transition duration-300 p-2"
      >
        <svg
          viewBox="0 -0.5 25 25"
          height="20px"
          width="20px"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linejoin="round"
            stroke-linecap="round"
            stroke-width="1.5"
            d="M18.507 19.853V6.034C18.5116 5.49905 18.3034 4.98422 17.9283 4.60277C17.5532 4.22131 17.042 4.00449 16.507 4H8.50705C7.9721 4.00449 7.46085 4.22131 7.08577 4.60277C6.7107 4.98422 6.50252 5.49905 6.50705 6.034V19.853C6.45951 20.252 6.65541 20.6407 7.00441 20.8399C7.35342 21.039 7.78773 21.0099 8.10705 20.766L11.907 17.485C12.2496 17.1758 12.7705 17.1758 13.113 17.485L16.9071 20.767C17.2265 21.0111 17.6611 21.0402 18.0102 20.8407C18.3593 20.6413 18.5551 20.2522 18.507 19.853Z"
            clip-rule="evenodd"
            fill-rule="evenodd"></path>
        </svg>
        <span class="text-sm text-sky-400 font-bold pr-1">Publicar Novedad</span
        >
      </button>
    </form>
  </div>
</Layout>

<style>
  #dropArea.highlight {
    border-color: #d0d2d3;
    background-color: #e0f7ff18;
  }

  #previewContainer img {
    max-width: 100%;
    width: 60px;
    height: auto;
    border-radius: 8px;
    margin-top: 16px;
  }
</style>

<script>
  let textarea = document.getElementById("content");
  if (textarea instanceof HTMLTextAreaElement) {
    textarea.addEventListener("focus", disableAutoResize, false);
    textarea.addEventListener("blur", enableAutoResize, false);
  }

  function disableAutoResize(this: HTMLTextAreaElement) {
    this.style.height = "auto";
  }

  function enableAutoResize(this: HTMLTextAreaElement) {
    this.style.height = this.scrollHeight + "px";
  }

  document.addEventListener("DOMContentLoaded", (event) => {
    const dropArea = document.getElementById("dropArea") as HTMLElement;
    const fileInput = document.getElementById("fileInputDragDrop") as HTMLInputElement;
    const imagePostInput = document.getElementById("imagepost") as HTMLInputElement;
    const previewContainer = document.createElement("div");
    previewContainer.id = "previewContainer";
    previewContainer.className = "flex flex-col items-center justify-center gap-2";
    dropArea.appendChild(previewContainer);

    // Prevent default drag behaviors
    ["dragenter", "dragover", "dragleave", "drop"].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e: Event) {
        e.preventDefault();
        e.stopPropagation();
    }

    // Highlight drop area when item is dragged over it
    ["dragenter", "dragover"].forEach(eventName => {
        dropArea.addEventListener(eventName, () => dropArea.classList.add("highlight"), false);
    });

    ["dragleave", "drop"].forEach(eventName => {
        dropArea.addEventListener(eventName, () => dropArea.classList.remove("highlight"), false);
    });

    // Handle dropped files
    dropArea.addEventListener("drop", handleDrop, false);

    function handleDrop(e: DragEvent) {
        const dt = e.dataTransfer;
        if (dt && dt.files.length) {
            const files = dt.files;
            handleFiles(files);
        }
    }

    function handleFiles(files: FileList) {
        if (files.length > 0) {
            const file = files[0];
            if (file.type === "image/webp") {
                fileInput.files = files;
                imagePostInput.files = files;

                // Display image preview
                previewImage(file);
            } else {
                alert("Solo se aceptan archivos webp.");
            }
        }
    }

    // Handle file input through the browse button
    fileInput.addEventListener("change", (e: Event) => {
        const target = e.target as HTMLInputElement;
        if (target.files) {
            const files = target.files;
            handleFiles(files);
        }
    });

    function previewImage(file: File) {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onloadend = () => {
            const img = document.createElement("img");
            img.src = reader.result as string;
            img.className = "w-full max-w-xl rounded-md";

            // Clear previous preview
            previewContainer.innerHTML = "";
            previewContainer.appendChild(img);
        };
    }
});

</script>
